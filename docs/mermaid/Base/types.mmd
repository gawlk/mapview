classDiagram
class JSONBaseDataLabelsGroup~From, T~ {
  <<interface>>
  version: 1
  from: From
  choices: JSONSelectableList#60;JSONDataLabel#60;T#62;#62;
}



class JSONBaseDataLabels {
  <<interface>>
  version: 1
  table: JSONSelectableList#60;JSONTableDataLabelsParameters#62;
}



class BaseDataLabels {
  <<interface>>
  groups: SelectableList#60;AnyBaseDataLabelsGroup, BaseDataLabelsGroups#62;
  table: SelectableList#60;BaseTableDataLabelsParameters#62;
  getList: #40;from: DataLabelsFrom#41; =#62; DataLabel#60;string, string#62;[]
  findIn: #40;     from: DataLabelsFrom,     name: string,     category?: DataCategory   #41; =#62; DataLabel#60;string, string#62; | undefined
  pushTo: #40;     from: DataLabelsFrom,     label: DataLabel   #41; =#62; DataLabel#60;string, string#62; | undefined
}
BaseDataLabels <.. AnyBaseDataLabelsGroup
BaseDataLabels <.. BaseDataLabelsGroups
BaseDataLabels <.. BaseTableDataLabelsParameters


class BaseDataLabelsGroups {
  <<type>>
  [   BaseDropDataLabelsGroup#60;BaseDropIndex#62;,   BaseTestDataLabelsGroup,   BaseZoneDataLabelsGroup ]
}
BaseDataLabelsGroups <.. BaseDropDataLabelsGroup~Drop~
BaseDataLabelsGroups <.. BaseDropIndex
BaseDataLabelsGroups <.. BaseTestDataLabelsGroup
BaseDataLabelsGroups <.. BaseZoneDataLabelsGroup


class AnyBaseDataLabelsGroup {
  <<type>>
  BaseDataLabelsGroups[number]
}
AnyBaseDataLabelsGroup <.. BaseDataLabelsGroups


class BaseDataLabelsGroup~From~ {
  <<interface>>
  from: From
  choices: SelectableList#60;DataLabel#60;string#62;#62;
}



class BaseDropDataLabelsGroup~Drop~ {
  <<interface>>
  indexes: SelectableList#60;Drop#62;
}



class BaseTestDataLabelsGroup {
  <<interface>>

}



class BaseZoneDataLabelsGroup {
  <<interface>>

}



class BaseTableDataLabelsParameters {
  <<interface>>
  group: AnyBaseDataLabelsGroup
  dataLabels: DataLabel#60;string#62;[]
  index?: BaseDropIndex
}
BaseTableDataLabelsParameters <.. AnyBaseDataLabelsGroup
BaseTableDataLabelsParameters <.. BaseDropIndex


class JSONBaseDropVAny {
  <<type>>
  JSONBaseDrop
}
JSONBaseDropVAny <.. JSONBaseDrop


class JSONBaseDrop {
  <<interface>>
  version: 1
  index: number
  data: JSONDataValue[]
}



class JSONBaseDropIndexVAny {
  <<type>>
  JSONBaseDropIndex
}
JSONBaseDropIndexVAny <.. JSONBaseDropIndex


class JSONBaseDropIndex {
  <<interface>>
  version: 1
  displayedIndex: number
}



class BaseDrop~DropIndex, Point~ {
  <<interface>>
  index: DropIndex
  data: DataValue#60;string#62;[]
  point: Point
  impactData: ImpactData | null
}



class BaseDropIndex {
  <<interface>>
  displayedIndex: number
}



class JSONBasePointVAny {
  <<type>>
  JSONBasePoint
}
JSONBasePointVAny <.. JSONBasePoint


class JSONBasePoint {
  <<interface>>
  version: 1
  id: string
  number: number
  index: number
  date: string
  coordinates: mapboxgl.LngLatLike
  data: JSONDataValue[]
  settings: JSONPointSettings
  information: JSONField[]
  drops: JSONMachineDrop[]
}



class BasePoint~Drop, Zone~ {
  <<interface>>
  id: string
  date: Date
  marker: mapboxgl.Marker | null
  icon: Icon | null
  settings: JSONPointSettings
  data: DataValue#60;string#62;[]
  information: Field[]
  drops: Drop[]
  index: number
  number: number
  zone: Zone
  rawDataFile: ArrayBufferLike | null
  getSelectedMathNumber: #40;     groupFrom: DataLabelsFrom,     dataLabel: DataLabel#60;string#62;,     index?: BaseDropIndex | null   #41; =#62; MathNumber | undefined
  getDisplayedString: #40;     groupFrom: DataLabelsFrom,     dataLabel: DataLabel#60;string#62;,     index?: BaseDropIndex | null   #41; =#62; string
  updateColor: #40;#41; =#62; void
  updateText: #40;#41; =#62; void
  updateVisibility: #40;#41; =#62; void
  updatePopup: #40;#41; =#62; void
  addToMap: #40;#41; =#62; void
  checkVisibility: #40;#41; =#62; boolean
  remove: #40;#41; =#62; void
}



class JSONBaseProjectVAny {
  <<type>>
  JSONBaseProject
}
JSONBaseProjectVAny <.. JSONBaseProject


class JSONBaseProject {
  <<interface>>
  version: 1
  name: string
  reports: JSONSelectableList#60;JSONMachineReport#62;
  settings: JSONProjectSettings
  overlays: JSONOverlay[]
  information: JSONField[]
  hardware: JSONField[]
  acquisitionParameters: JSONAcquisitionParameters
}



class BaseProject~Report, MathUnits~ {
  <<interface>>
  name: Field
  information: Field[]
  hardware: Field[]
  reports: SelectableList#60;Report#62;
  units: MathUnits
  settings: BaseProjectSettings
  overlays: Overlay[]
  acquisitionParameters: JSONAcquisitionParameters
  refreshLinesAndOverlays: #40;#41; =#62; void
  setMapStyle: #40;styleIndex: number#41; =#62; void
  fitOnMap: #40;#41; =#62; void
  addToMap: #40;#41; =#62; void
  remove: #40;#41; =#62; void
}
BaseProject~Report, MathUnits~ <.. BaseProjectSettings


class BaseProjectSettings {
  <<interface>>
  arePointsLocked: boolean
}



class JSONBaseReportVAny {
  <<type>>
  JSONBaseReport
}
JSONBaseReportVAny <.. JSONBaseReport


class JSONBaseReport {
  <<interface>>
  version: 1
  name: string
  zones: JSONMachineZone[]
  settings: JSONReportSettings
  screenshots: number[]
  platform: JSONField[]
  information: JSONField[]
  dataLabels: JSONBaseDataLabels
  thresholds: JSONBaseThresholdsSettings
}
JSONBaseReport <.. JSONBaseDataLabels
JSONBaseReport <.. JSONBaseThresholdsSettings


class JSONBaseThresholdsSettings {
  <<interface>>
  version: 1
  colors: JSONThresholdColors
  inputs: JSONThresholdInputs
}



class BaseReport~Project, Zone, DataLabels, Thresholds~ {
  <<interface>>
  name: Field
  line: Line
  zones: Zone[]
  screenshots: string[]
  dataLabels: DataLabels
  thresholds: Thresholds
  settings: JSONReportSettings
  platform: Field[]
  information: Field[]
  project: Project
  isOnMap: boolean
  fitOnMap: #40;#41; =#62; void
  addToMap: #40;#41; =#62; void
  remove: #40;#41; =#62; void
}



class BaseThresholds~ThresholdsGroups~ {
  <<interface>>
  groups: ThresholdsGroups
  colors: JSONThresholdColors
  inputs: JSONThresholdInputs
}



class BaseThresholdsGroups {
  <<type>>
  MachineUnitsSkeleton#60;ThresholdsGroup#60;string#62;#62;
}



class BaseObject~T~ {
  <<interface>>
  toBaseJSON: #40;#41; =#62; T
}



class JSONBaseZoneVAny {
  <<type>>
  JSONBaseZone
}
JSONBaseZoneVAny <.. JSONBaseZone


class JSONBaseZone {
  <<interface>>
  version: 1
  name: string
  points: JSONMachinePoint[]
  settings: JSONZoneSettings
}



class BaseZone~Point, Report~ {
  <<interface>>
  points: Point[]
  settings: JSONZoneSettings
  name: string
  report: Report
  data: DataValue#60;string#62;[]
  init: #40;#41; =#62; void
  clean: #40;#41; =#62; void
}



